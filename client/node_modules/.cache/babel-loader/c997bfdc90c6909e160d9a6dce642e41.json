{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Polyfill from './utils/polyfill.js';\nimport Features from './core/features.js';\nimport { BaseLoader, LoaderStatus, LoaderErrors } from './io/loader.js';\nimport FlvPlayer from './player/flv-player.js';\nimport NativePlayer from './player/native-player.js';\nimport PlayerEvents from './player/player-events.js';\nimport { ErrorTypes, ErrorDetails } from './player/player-errors.js';\nimport LoggingControl from './utils/logging-control.js';\nimport { InvalidArgumentException } from './utils/exception.js'; // here are all the interfaces\n// install polyfills\n\nPolyfill.install(); // factory method\n\nfunction createPlayer(mediaDataSource, optionalConfig) {\n  let mds = mediaDataSource;\n\n  if (mds == null || typeof mds !== 'object') {\n    throw new InvalidArgumentException('MediaDataSource must be an javascript object!');\n  }\n\n  if (!mds.hasOwnProperty('type')) {\n    throw new InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n  }\n\n  switch (mds.type) {\n    case 'flv':\n      return new FlvPlayer(mds, optionalConfig);\n\n    default:\n      return new NativePlayer(mds, optionalConfig);\n  }\n} // feature detection\n\n\nfunction isSupported() {\n  return Features.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n  return Features.getFeatureList();\n} // interfaces\n\n\nlet flvjs = {};\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\nflvjs.BaseLoader = BaseLoader;\nflvjs.LoaderStatus = LoaderStatus;\nflvjs.LoaderErrors = LoaderErrors;\nflvjs.Events = PlayerEvents;\nflvjs.ErrorTypes = ErrorTypes;\nflvjs.ErrorDetails = ErrorDetails;\nflvjs.FlvPlayer = FlvPlayer;\nflvjs.NativePlayer = NativePlayer;\nflvjs.LoggingControl = LoggingControl;\nObject.defineProperty(flvjs, 'version', {\n  enumerable: true,\n  get: function () {\n    // replaced by browserify-versionify transform\n    return '__VERSION__';\n  }\n});\nexport default flvjs;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/flv.js"],"names":["Polyfill","Features","BaseLoader","LoaderStatus","LoaderErrors","FlvPlayer","NativePlayer","PlayerEvents","ErrorTypes","ErrorDetails","LoggingControl","InvalidArgumentException","install","createPlayer","mediaDataSource","optionalConfig","mds","hasOwnProperty","type","isSupported","supportMSEH264Playback","getFeatureList","flvjs","Events","Object","defineProperty","enumerable","get"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAAQC,UAAR,EAAoBC,YAApB,EAAkCC,YAAlC,QAAqD,gBAArD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAAQC,UAAR,EAAoBC,YAApB,QAAuC,2BAAvC;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAAQC,wBAAR,QAAuC,sBAAvC,C,CAEA;AAEA;;AACAX,QAAQ,CAACY,OAAT,G,CAGA;;AACA,SAASC,YAAT,CAAsBC,eAAtB,EAAuCC,cAAvC,EAAuD;AACnD,MAAIC,GAAG,GAAGF,eAAV;;AACA,MAAIE,GAAG,IAAI,IAAP,IAAe,OAAOA,GAAP,KAAe,QAAlC,EAA4C;AACxC,UAAM,IAAIL,wBAAJ,CAA6B,+CAA7B,CAAN;AACH;;AAED,MAAI,CAACK,GAAG,CAACC,cAAJ,CAAmB,MAAnB,CAAL,EAAiC;AAC7B,UAAM,IAAIN,wBAAJ,CAA6B,kEAA7B,CAAN;AACH;;AAED,UAAQK,GAAG,CAACE,IAAZ;AACI,SAAK,KAAL;AACI,aAAO,IAAIb,SAAJ,CAAcW,GAAd,EAAmBD,cAAnB,CAAP;;AACJ;AACI,aAAO,IAAIT,YAAJ,CAAiBU,GAAjB,EAAsBD,cAAtB,CAAP;AAJR;AAMH,C,CAGD;;;AACA,SAASI,WAAT,GAAuB;AACnB,SAAOlB,QAAQ,CAACmB,sBAAT,EAAP;AACH;;AAED,SAASC,cAAT,GAA0B;AACtB,SAAOpB,QAAQ,CAACoB,cAAT,EAAP;AACH,C,CAGD;;;AACA,IAAIC,KAAK,GAAG,EAAZ;AAEAA,KAAK,CAACT,YAAN,GAAqBA,YAArB;AACAS,KAAK,CAACH,WAAN,GAAoBA,WAApB;AACAG,KAAK,CAACD,cAAN,GAAuBA,cAAvB;AAEAC,KAAK,CAACpB,UAAN,GAAmBA,UAAnB;AACAoB,KAAK,CAACnB,YAAN,GAAqBA,YAArB;AACAmB,KAAK,CAAClB,YAAN,GAAqBA,YAArB;AAEAkB,KAAK,CAACC,MAAN,GAAehB,YAAf;AACAe,KAAK,CAACd,UAAN,GAAmBA,UAAnB;AACAc,KAAK,CAACb,YAAN,GAAqBA,YAArB;AAEAa,KAAK,CAACjB,SAAN,GAAkBA,SAAlB;AACAiB,KAAK,CAAChB,YAAN,GAAqBA,YAArB;AACAgB,KAAK,CAACZ,cAAN,GAAuBA,cAAvB;AAEAc,MAAM,CAACC,cAAP,CAAsBH,KAAtB,EAA6B,SAA7B,EAAwC;AACpCI,EAAAA,UAAU,EAAE,IADwB;AAEpCC,EAAAA,GAAG,EAAE,YAAY;AACb;AACA,WAAO,aAAP;AACH;AALmC,CAAxC;AAQA,eAAeL,KAAf","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Polyfill from './utils/polyfill.js';\nimport Features from './core/features.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './io/loader.js';\nimport FlvPlayer from './player/flv-player.js';\nimport NativePlayer from './player/native-player.js';\nimport PlayerEvents from './player/player-events.js';\nimport {ErrorTypes, ErrorDetails} from './player/player-errors.js';\nimport LoggingControl from './utils/logging-control.js';\nimport {InvalidArgumentException} from './utils/exception.js';\n\n// here are all the interfaces\n\n// install polyfills\nPolyfill.install();\n\n\n// factory method\nfunction createPlayer(mediaDataSource, optionalConfig) {\n    let mds = mediaDataSource;\n    if (mds == null || typeof mds !== 'object') {\n        throw new InvalidArgumentException('MediaDataSource must be an javascript object!');\n    }\n\n    if (!mds.hasOwnProperty('type')) {\n        throw new InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n    }\n\n    switch (mds.type) {\n        case 'flv':\n            return new FlvPlayer(mds, optionalConfig);\n        default:\n            return new NativePlayer(mds, optionalConfig);\n    }\n}\n\n\n// feature detection\nfunction isSupported() {\n    return Features.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n    return Features.getFeatureList();\n}\n\n\n// interfaces\nlet flvjs = {};\n\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\n\nflvjs.BaseLoader = BaseLoader;\nflvjs.LoaderStatus = LoaderStatus;\nflvjs.LoaderErrors = LoaderErrors;\n\nflvjs.Events = PlayerEvents;\nflvjs.ErrorTypes = ErrorTypes;\nflvjs.ErrorDetails = ErrorDetails;\n\nflvjs.FlvPlayer = FlvPlayer;\nflvjs.NativePlayer = NativePlayer;\nflvjs.LoggingControl = LoggingControl;\n\nObject.defineProperty(flvjs, 'version', {\n    enumerable: true,\n    get: function () {\n        // replaced by browserify-versionify transform\n        return '__VERSION__';\n    }\n});\n\nexport default flvjs;"]},"metadata":{},"sourceType":"module"}