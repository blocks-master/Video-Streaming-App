{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport { BaseLoader, LoaderStatus, LoaderErrors } from './loader.js';\nimport { RuntimeException } from '../utils/exception.js';\n/* fetch + stream IO loader. Currently working on chrome 43+.\n * fetch provides a better alternative http API to XMLHttpRequest\n *\n * fetch spec   https://fetch.spec.whatwg.org/\n * stream spec  https://streams.spec.whatwg.org/\n */\n\nclass FetchStreamLoader extends BaseLoader {\n  static isSupported() {\n    try {\n      // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n      // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n      // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n      let isWorkWellEdge = Browser.msedge && Browser.version.minor >= 15048;\n      let browserNotBlacklisted = Browser.msedge ? isWorkWellEdge : true;\n      return self.fetch && self.ReadableStream && browserNotBlacklisted;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(seekHandler, config) {\n    super('fetch-stream-loader');\n    this.TAG = 'FetchStreamLoader';\n    this._seekHandler = seekHandler;\n    this._config = config;\n    this._needStash = true;\n    this._requestAbort = false;\n    this._contentLength = null;\n    this._receivedLength = 0;\n  }\n\n  destroy() {\n    if (this.isWorking()) {\n      this.abort();\n    }\n\n    super.destroy();\n  }\n\n  open(dataSource, range) {\n    this._dataSource = dataSource;\n    this._range = range;\n    let sourceURL = dataSource.url;\n\n    if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n      sourceURL = dataSource.redirectedURL;\n    }\n\n    let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n    let headers = new self.Headers();\n\n    if (typeof seekConfig.headers === 'object') {\n      let configHeaders = seekConfig.headers;\n\n      for (let key in configHeaders) {\n        if (configHeaders.hasOwnProperty(key)) {\n          headers.append(key, configHeaders[key]);\n        }\n      }\n    }\n\n    let params = {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors',\n      cache: 'default',\n      // The default policy of Fetch API in the whatwg standard\n      // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\n      referrerPolicy: 'no-referrer-when-downgrade'\n    }; // add additional headers\n\n    if (typeof this._config.headers === 'object') {\n      for (let key in this._config.headers) {\n        headers.append(key, this._config.headers[key]);\n      }\n    } // cors is enabled by default\n\n\n    if (dataSource.cors === false) {\n      // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n      params.mode = 'same-origin';\n    } // withCredentials is disabled by default\n\n\n    if (dataSource.withCredentials) {\n      params.credentials = 'include';\n    } // referrerPolicy from config\n\n\n    if (dataSource.referrerPolicy) {\n      params.referrerPolicy = dataSource.referrerPolicy;\n    }\n\n    this._status = LoaderStatus.kConnecting;\n    self.fetch(seekConfig.url, params).then(res => {\n      if (this._requestAbort) {\n        this._requestAbort = false;\n        this._status = LoaderStatus.kIdle;\n        return;\n      }\n\n      if (res.ok && res.status >= 200 && res.status <= 299) {\n        if (res.url !== seekConfig.url) {\n          if (this._onURLRedirect) {\n            let redirectedURL = this._seekHandler.removeURLParameters(res.url);\n\n            this._onURLRedirect(redirectedURL);\n          }\n        }\n\n        let lengthHeader = res.headers.get('Content-Length');\n\n        if (lengthHeader != null) {\n          this._contentLength = parseInt(lengthHeader);\n\n          if (this._contentLength !== 0) {\n            if (this._onContentLengthKnown) {\n              this._onContentLengthKnown(this._contentLength);\n            }\n          }\n        }\n\n        return this._pump.call(this, res.body.getReader());\n      } else {\n        this._status = LoaderStatus.kError;\n\n        if (this._onError) {\n          this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {\n            code: res.status,\n            msg: res.statusText\n          });\n        } else {\n          throw new RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n        }\n      }\n    }).catch(e => {\n      this._status = LoaderStatus.kError;\n\n      if (this._onError) {\n        this._onError(LoaderErrors.EXCEPTION, {\n          code: -1,\n          msg: e.message\n        });\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  abort() {\n    this._requestAbort = true;\n  }\n\n  _pump(reader) {\n    // ReadableStreamReader\n    return reader.read().then(result => {\n      if (result.done) {\n        // First check received length\n        if (this._contentLength !== null && this._receivedLength < this._contentLength) {\n          // Report Early-EOF\n          this._status = LoaderStatus.kError;\n          let type = LoaderErrors.EARLY_EOF;\n          let info = {\n            code: -1,\n            msg: 'Fetch stream meet Early-EOF'\n          };\n\n          if (this._onError) {\n            this._onError(type, info);\n          } else {\n            throw new RuntimeException(info.msg);\n          }\n        } else {\n          // OK. Download complete\n          this._status = LoaderStatus.kComplete;\n\n          if (this._onComplete) {\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n          }\n        }\n      } else {\n        if (this._requestAbort === true) {\n          this._requestAbort = false;\n          this._status = LoaderStatus.kComplete;\n          return reader.cancel();\n        }\n\n        this._status = LoaderStatus.kBuffering;\n        let chunk = result.value.buffer;\n        let byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if (this._onDataArrival) {\n          this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n\n        this._pump(reader);\n      }\n    }).catch(e => {\n      if (e.code === 11 && Browser.msedge) {\n        // InvalidStateError on Microsoft Edge\n        // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n        // Ignore the unknown exception.\n        // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n        return;\n      }\n\n      this._status = LoaderStatus.kError;\n      let type = 0;\n      let info = null;\n\n      if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR\n      this._contentLength === null || this._contentLength !== null && this._receivedLength < this._contentLength)) {\n        type = LoaderErrors.EARLY_EOF;\n        info = {\n          code: e.code,\n          msg: 'Fetch stream meet Early-EOF'\n        };\n      } else {\n        type = LoaderErrors.EXCEPTION;\n        info = {\n          code: e.code,\n          msg: e.message\n        };\n      }\n\n      if (this._onError) {\n        this._onError(type, info);\n      } else {\n        throw new RuntimeException(info.msg);\n      }\n    });\n  }\n\n}\n\nexport default FetchStreamLoader;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/io/fetch-stream-loader.js"],"names":["Log","Browser","BaseLoader","LoaderStatus","LoaderErrors","RuntimeException","FetchStreamLoader","isSupported","isWorkWellEdge","msedge","version","minor","browserNotBlacklisted","self","fetch","ReadableStream","e","constructor","seekHandler","config","TAG","_seekHandler","_config","_needStash","_requestAbort","_contentLength","_receivedLength","destroy","isWorking","abort","open","dataSource","range","_dataSource","_range","sourceURL","url","reuseRedirectedURL","redirectedURL","undefined","seekConfig","getConfig","headers","Headers","configHeaders","key","hasOwnProperty","append","params","method","mode","cache","referrerPolicy","cors","withCredentials","credentials","_status","kConnecting","then","res","kIdle","ok","status","_onURLRedirect","removeURLParameters","lengthHeader","get","parseInt","_onContentLengthKnown","_pump","call","body","getReader","kError","_onError","HTTP_STATUS_CODE_INVALID","code","msg","statusText","catch","EXCEPTION","message","reader","read","result","done","type","EARLY_EOF","info","kComplete","_onComplete","from","cancel","kBuffering","chunk","value","buffer","byteStart","byteLength","_onDataArrival"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n/* fetch + stream IO loader. Currently working on chrome 43+.\n * fetch provides a better alternative http API to XMLHttpRequest\n *\n * fetch spec   https://fetch.spec.whatwg.org/\n * stream spec  https://streams.spec.whatwg.org/\n */\nclass FetchStreamLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n            // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n            // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n            let isWorkWellEdge = Browser.msedge && Browser.version.minor >= 15048;\n            let browserNotBlacklisted = Browser.msedge ? isWorkWellEdge : true;\n            return (self.fetch && self.ReadableStream && browserNotBlacklisted);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    constructor(seekHandler, config) {\n        super('fetch-stream-loader');\n        this.TAG = 'FetchStreamLoader';\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n    }\n\n    destroy() {\n        if (this.isWorking()) {\n            this.abort();\n        }\n        super.destroy();\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n        let headers = new self.Headers();\n\n        if (typeof seekConfig.headers === 'object') {\n            let configHeaders = seekConfig.headers;\n            for (let key in configHeaders) {\n                if (configHeaders.hasOwnProperty(key)) {\n                    headers.append(key, configHeaders[key]);\n                }\n            }\n        }\n\n        let params = {\n            method: 'GET',\n            headers: headers,\n            mode: 'cors',\n            cache: 'default',\n            // The default policy of Fetch API in the whatwg standard\n            // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\n            referrerPolicy: 'no-referrer-when-downgrade'\n        };\n\n        // add additional headers\n        if (typeof this._config.headers === 'object') {\n            for (let key in this._config.headers) {\n                headers.append(key, this._config.headers[key]);\n            }\n        }\n\n        // cors is enabled by default\n        if (dataSource.cors === false) {\n            // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n            params.mode = 'same-origin';\n        }\n\n        // withCredentials is disabled by default\n        if (dataSource.withCredentials) {\n            params.credentials = 'include';\n        }\n\n        // referrerPolicy from config\n        if (dataSource.referrerPolicy) {\n            params.referrerPolicy = dataSource.referrerPolicy;\n        }\n\n        this._status = LoaderStatus.kConnecting;\n        self.fetch(seekConfig.url, params).then((res) => {\n            if (this._requestAbort) {\n                this._requestAbort = false;\n                this._status = LoaderStatus.kIdle;\n                return;\n            }\n            if (res.ok && (res.status >= 200 && res.status <= 299)) {\n                if (res.url !== seekConfig.url) {\n                    if (this._onURLRedirect) {\n                        let redirectedURL = this._seekHandler.removeURLParameters(res.url);\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n\n                let lengthHeader = res.headers.get('Content-Length');\n                if (lengthHeader != null) {\n                    this._contentLength = parseInt(lengthHeader);\n                    if (this._contentLength !== 0) {\n                        if (this._onContentLengthKnown) {\n                            this._onContentLengthKnown(this._contentLength);\n                        }\n                    }\n                }\n\n                return this._pump.call(this, res.body.getReader());\n            } else {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: res.status, msg: res.statusText});\n                } else {\n                    throw new RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n                }\n            }\n        }).catch((e) => {\n            this._status = LoaderStatus.kError;\n            if (this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, {code: -1, msg: e.message});\n            } else {\n                throw e;\n            }\n        });\n    }\n\n    abort() {\n        this._requestAbort = true;\n    }\n\n    _pump(reader) {  // ReadableStreamReader\n        return reader.read().then((result) => {\n            if (result.done) {\n                // First check received length\n                if (this._contentLength !== null && this._receivedLength < this._contentLength) {\n                    // Report Early-EOF\n                    this._status = LoaderStatus.kError;\n                    let type = LoaderErrors.EARLY_EOF;\n                    let info = {code: -1, msg: 'Fetch stream meet Early-EOF'};\n                    if (this._onError) {\n                        this._onError(type, info);\n                    } else {\n                        throw new RuntimeException(info.msg);\n                    }\n                } else {\n                    // OK. Download complete\n                    this._status = LoaderStatus.kComplete;\n                    if (this._onComplete) {\n                        this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n                    }\n                }\n            } else {\n                if (this._requestAbort === true) {\n                    this._requestAbort = false;\n                    this._status = LoaderStatus.kComplete;\n                    return reader.cancel();\n                }\n\n                this._status = LoaderStatus.kBuffering;\n\n                let chunk = result.value.buffer;\n                let byteStart = this._range.from + this._receivedLength;\n                this._receivedLength += chunk.byteLength;\n\n                if (this._onDataArrival) {\n                    this._onDataArrival(chunk, byteStart, this._receivedLength);\n                }\n\n                this._pump(reader);\n            }\n        }).catch((e) => {\n            if (e.code === 11 && Browser.msedge) {  // InvalidStateError on Microsoft Edge\n                // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n                // Ignore the unknown exception.\n                // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n                return;\n            }\n\n            this._status = LoaderStatus.kError;\n            let type = 0;\n            let info = null;\n\n            if ((e.code === 19 || e.message === 'network error') && // NETWORK_ERR\n                (this._contentLength === null ||\n                (this._contentLength !== null && this._receivedLength < this._contentLength))) {\n                type = LoaderErrors.EARLY_EOF;\n                info = {code: e.code, msg: 'Fetch stream meet Early-EOF'};\n            } else {\n                type = LoaderErrors.EXCEPTION;\n                info = {code: e.code, msg: e.message};\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new RuntimeException(info.msg);\n            }\n        });\n    }\n\n}\n\nexport default FetchStreamLoader;\n"]},"metadata":{},"sourceType":"module"}