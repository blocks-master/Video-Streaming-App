{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IllegalStateException, InvalidArgumentException } from '../utils/exception.js'; // Exponential-Golomb buffer decoder\n\nclass ExpGolomb {\n  constructor(uint8array) {\n    this.TAG = 'ExpGolomb';\n    this._buffer = uint8array;\n    this._buffer_index = 0;\n    this._total_bytes = uint8array.byteLength;\n    this._total_bits = uint8array.byteLength * 8;\n    this._current_word = 0;\n    this._current_word_bits_left = 0;\n  }\n\n  destroy() {\n    this._buffer = null;\n  }\n\n  _fillCurrentWord() {\n    let buffer_bytes_left = this._total_bytes - this._buffer_index;\n    if (buffer_bytes_left <= 0) throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n    let bytes_read = Math.min(4, buffer_bytes_left);\n    let word = new Uint8Array(4);\n    word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n    this._current_word = new DataView(word.buffer).getUint32(0, false);\n    this._buffer_index += bytes_read;\n    this._current_word_bits_left = bytes_read * 8;\n  }\n\n  readBits(bits) {\n    if (bits > 32) throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n    if (bits <= this._current_word_bits_left) {\n      let result = this._current_word >>> 32 - bits;\n      this._current_word <<= bits;\n      this._current_word_bits_left -= bits;\n      return result;\n    }\n\n    let result = this._current_word_bits_left ? this._current_word : 0;\n    result = result >>> 32 - this._current_word_bits_left;\n    let bits_need_left = bits - this._current_word_bits_left;\n\n    this._fillCurrentWord();\n\n    let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n    let result2 = this._current_word >>> 32 - bits_read_next;\n    this._current_word <<= bits_read_next;\n    this._current_word_bits_left -= bits_read_next;\n    result = result << bits_read_next | result2;\n    return result;\n  }\n\n  readBool() {\n    return this.readBits(1) === 1;\n  }\n\n  readByte() {\n    return this.readBits(8);\n  }\n\n  _skipLeadingZero() {\n    let zero_count;\n\n    for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n      if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n        this._current_word <<= zero_count;\n        this._current_word_bits_left -= zero_count;\n        return zero_count;\n      }\n    }\n\n    this._fillCurrentWord();\n\n    return zero_count + this._skipLeadingZero();\n  }\n\n  readUEG() {\n    // unsigned exponential golomb\n    let leading_zeros = this._skipLeadingZero();\n\n    return this.readBits(leading_zeros + 1) - 1;\n  }\n\n  readSEG() {\n    // signed exponential golomb\n    let value = this.readUEG();\n\n    if (value & 0x01) {\n      return value + 1 >>> 1;\n    } else {\n      return -1 * (value >>> 1);\n    }\n  }\n\n}\n\nexport default ExpGolomb;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/demux/exp-golomb.js"],"names":["IllegalStateException","InvalidArgumentException","ExpGolomb","constructor","uint8array","TAG","_buffer","_buffer_index","_total_bytes","byteLength","_total_bits","_current_word","_current_word_bits_left","destroy","_fillCurrentWord","buffer_bytes_left","bytes_read","Math","min","word","Uint8Array","set","subarray","DataView","buffer","getUint32","readBits","bits","result","bits_need_left","bits_read_next","result2","readBool","readByte","_skipLeadingZero","zero_count","readUEG","leading_zeros","readSEG","value"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\n\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0)\n            throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n        let bytes_read = Math.min(4, buffer_bytes_left);\n        let word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32)\n            throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n        if (bits <= this._current_word_bits_left) {\n            let result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        let bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        let result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() {  // unsigned exponential golomb\n        let leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() {  // signed exponential golomb\n        let value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;"]},"metadata":{},"sourceType":"module"}