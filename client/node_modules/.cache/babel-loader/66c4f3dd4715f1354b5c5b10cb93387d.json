{"ast":null,"code":"import isPromise from 'is-promise';\n\nvar asyncValidation = function asyncValidation(fn, start, stop, field) {\n  start(field);\n  var promise = fn();\n\n  if (!isPromise(promise)) {\n    throw new Error('asyncValidate function passed to reduxForm must return a promise');\n  }\n\n  var handleErrors = function handleErrors(rejected) {\n    return function (errors) {\n      if (rejected) {\n        if (errors && Object.keys(errors).length) {\n          stop(errors);\n          return errors;\n        } else {\n          stop();\n          throw new Error('Asynchronous validation promise was rejected without errors.');\n        }\n      }\n\n      stop();\n      return Promise.resolve();\n    };\n  };\n\n  return promise.then(handleErrors(false), handleErrors(true));\n};\n\nexport default asyncValidation;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/redux-form/es/asyncValidation.js"],"names":["isPromise","asyncValidation","fn","start","stop","field","promise","Error","handleErrors","rejected","errors","Object","keys","length","Promise","resolve","then"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,KAA1C,EAAiD;AACrEF,EAAAA,KAAK,CAACE,KAAD,CAAL;AACA,MAAIC,OAAO,GAAGJ,EAAE,EAAhB;;AAEA,MAAI,CAACF,SAAS,CAACM,OAAD,CAAd,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,MAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AACjD,WAAO,UAAUC,MAAV,EAAkB;AACvB,UAAID,QAAJ,EAAc;AACZ,YAAIC,MAAM,IAAIC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAAlC,EAA0C;AACxCT,UAAAA,IAAI,CAACM,MAAD,CAAJ;AACA,iBAAOA,MAAP;AACD,SAHD,MAGO;AACLN,UAAAA,IAAI;AACJ,gBAAM,IAAIG,KAAJ,CAAU,8DAAV,CAAN;AACD;AACF;;AAEDH,MAAAA,IAAI;AACJ,aAAOU,OAAO,CAACC,OAAR,EAAP;AACD,KAbD;AAcD,GAfD;;AAiBA,SAAOT,OAAO,CAACU,IAAR,CAAaR,YAAY,CAAC,KAAD,CAAzB,EAAkCA,YAAY,CAAC,IAAD,CAA9C,CAAP;AACD,CA1BD;;AA4BA,eAAeP,eAAf","sourcesContent":["import isPromise from 'is-promise';\n\nvar asyncValidation = function asyncValidation(fn, start, stop, field) {\n  start(field);\n  var promise = fn();\n\n  if (!isPromise(promise)) {\n    throw new Error('asyncValidate function passed to reduxForm must return a promise');\n  }\n\n  var handleErrors = function handleErrors(rejected) {\n    return function (errors) {\n      if (rejected) {\n        if (errors && Object.keys(errors).length) {\n          stop(errors);\n          return errors;\n        } else {\n          stop();\n          throw new Error('Asynchronous validation promise was rejected without errors.');\n        }\n      }\n\n      stop();\n      return Promise.resolve();\n    };\n  };\n\n  return promise.then(handleErrors(false), handleErrors(true));\n};\n\nexport default asyncValidation;"]},"metadata":{},"sourceType":"module"}