{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gethi\\\\Desktop\\\\React Apps\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\nimport { formValues } from \"redux-form\";\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {};\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, \"Edit a Stream\"), /*#__PURE__*/React.createElement(StreamForm, {\n      initialValues: _.pick(this.props.stream, \"title\", \"description\"),\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/src/components/streams/StreamEdit.js"],"names":["_","React","connect","fetchStream","editStream","StreamForm","formValues","StreamEdit","Component","onSubmit","componentDidMount","props","match","params","id","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;;AACA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAIxCC,QAJwC,GAI5BH,UAAD,IAAgB,CAAE,CAJW;AAAA;;AACxCI,EAAAA,iBAAiB,GAAG;AACnB,SAAKC,KAAL,CAAWR,WAAX,CAAuB,KAAKQ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACA;;AAEDC,EAAAA,MAAM,GAAG;AACR,QAAI,CAAC,KAAKJ,KAAL,CAAWK,MAAhB,EAAwB;AACvB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACA;;AACD,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,eAEC,oBAAC,UAAD;AACC,MAAA,aAAa,EAAEhB,CAAC,CAACiB,IAAF,CAAO,KAAKN,KAAL,CAAWK,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CADhB;AAEC,MAAA,QAAQ,EAAE,KAAKP,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADD;AASA;;AAlBuC;;AAqBzC,MAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAO;AAAEJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACR,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACA,CAFD;;AAIA,eAAeZ,OAAO,CAACgB,eAAD,EAAkB;AAAEf,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAlB,CAAP,CAAsDG,UAAtD,CAAf","sourcesContent":["import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\nimport { formValues } from \"redux-form\";\r\nclass StreamEdit extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.fetchStream(this.props.match.params.id);\r\n\t}\r\n\tonSubmit = (formValues) => {};\r\n\trender() {\r\n\t\tif (!this.props.stream) {\r\n\t\t\treturn <div>Loading...</div>;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Edit a Stream</h3>\r\n\t\t\t\t<StreamForm\r\n\t\t\t\t\tinitialValues={_.pick(this.props.stream, \"title\", \"description\")}\r\n\t\t\t\t\tonSubmit={this.onSubmit}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\treturn { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchStream, editStream })(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}