{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport { createDefaultConfig } from '../config.js';\nimport { InvalidArgumentException, IllegalStateException } from '../utils/exception.js'; // Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \n\nclass NativePlayer {\n  constructor(mediaDataSource, config) {\n    this.TAG = 'NativePlayer';\n    this._type = 'NativePlayer';\n    this._emitter = new EventEmitter();\n    this._config = createDefaultConfig();\n\n    if (typeof config === 'object') {\n      Object.assign(this._config, config);\n    }\n\n    if (mediaDataSource.type.toLowerCase() === 'flv') {\n      throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n    }\n\n    if (mediaDataSource.hasOwnProperty('segments')) {\n      throw new InvalidArgumentException(`NativePlayer(${mediaDataSource.type}) doesn't support multipart playback!`);\n    }\n\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null;\n    this._mediaDataSource = mediaDataSource;\n    this._mediaElement = null;\n  }\n\n  destroy() {\n    if (this._mediaElement) {\n      this.unload();\n      this.detachMediaElement();\n    }\n\n    this.e = null;\n    this._mediaDataSource = null;\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n  }\n\n  on(event, listener) {\n    if (event === PlayerEvents.MEDIA_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        // HAVE_NOTHING\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n        });\n      }\n    } else if (event === PlayerEvents.STATISTICS_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n        });\n      }\n    }\n\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  attachMediaElement(mediaElement) {\n    this._mediaElement = mediaElement;\n    mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n    if (this._pendingSeekTime != null) {\n      try {\n        mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n        // Defer set currentTime operation after loadedmetadata\n      }\n    }\n  }\n\n  detachMediaElement() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n\n      this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      this._mediaElement = null;\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  load() {\n    if (!this._mediaElement) {\n      throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n    }\n\n    this._mediaElement.src = this._mediaDataSource.url;\n\n    if (this._mediaElement.readyState > 0) {\n      this._mediaElement.currentTime = 0;\n    }\n\n    this._mediaElement.preload = 'auto';\n\n    this._mediaElement.load();\n\n    this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n  }\n\n  unload() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  play() {\n    return this._mediaElement.play();\n  }\n\n  pause() {\n    this._mediaElement.pause();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get buffered() {\n    return this._mediaElement.buffered;\n  }\n\n  get duration() {\n    return this._mediaElement.duration;\n  }\n\n  get volume() {\n    return this._mediaElement.volume;\n  }\n\n  set volume(value) {\n    this._mediaElement.volume = value;\n  }\n\n  get muted() {\n    return this._mediaElement.muted;\n  }\n\n  set muted(muted) {\n    this._mediaElement.muted = muted;\n  }\n\n  get currentTime() {\n    if (this._mediaElement) {\n      return this._mediaElement.currentTime;\n    }\n\n    return 0;\n  }\n\n  set currentTime(seconds) {\n    if (this._mediaElement) {\n      this._mediaElement.currentTime = seconds;\n    } else {\n      this._pendingSeekTime = seconds;\n    }\n  }\n\n  get mediaInfo() {\n    let mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n    let info = {\n      mimeType: mediaPrefix + this._mediaDataSource.type\n    };\n\n    if (this._mediaElement) {\n      info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n      if (this._mediaElement instanceof HTMLVideoElement) {\n        info.width = this._mediaElement.videoWidth;\n        info.height = this._mediaElement.videoHeight;\n      }\n    }\n\n    return info;\n  }\n\n  get statisticsInfo() {\n    let info = {\n      playerType: this._type,\n      url: this._mediaDataSource.url\n    };\n\n    if (!(this._mediaElement instanceof HTMLVideoElement)) {\n      return info;\n    }\n\n    let hasQualityInfo = true;\n    let decoded = 0;\n    let dropped = 0;\n\n    if (this._mediaElement.getVideoPlaybackQuality) {\n      let quality = this._mediaElement.getVideoPlaybackQuality();\n\n      decoded = quality.totalVideoFrames;\n      dropped = quality.droppedVideoFrames;\n    } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n      decoded = this._mediaElement.webkitDecodedFrameCount;\n      dropped = this._mediaElement.webkitDroppedFrameCount;\n    } else {\n      hasQualityInfo = false;\n    }\n\n    if (hasQualityInfo) {\n      info.decodedFrames = decoded;\n      info.droppedFrames = dropped;\n    }\n\n    return info;\n  }\n\n  _onvLoadedMetadata(e) {\n    if (this._pendingSeekTime != null) {\n      this._mediaElement.currentTime = this._pendingSeekTime;\n      this._pendingSeekTime = null;\n    }\n\n    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n  }\n\n  _reportStatisticsInfo() {\n    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n  }\n\n}\n\nexport default NativePlayer;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/player/native-player.js"],"names":["EventEmitter","PlayerEvents","createDefaultConfig","InvalidArgumentException","IllegalStateException","NativePlayer","constructor","mediaDataSource","config","TAG","_type","_emitter","_config","Object","assign","type","toLowerCase","hasOwnProperty","e","onvLoadedMetadata","_onvLoadedMetadata","bind","_pendingSeekTime","_statisticsReporter","_mediaDataSource","_mediaElement","destroy","unload","detachMediaElement","removeAllListeners","on","event","listener","MEDIA_INFO","readyState","Promise","resolve","then","emit","mediaInfo","STATISTICS_INFO","statisticsInfo","addListener","off","removeListener","attachMediaElement","mediaElement","addEventListener","currentTime","src","removeAttribute","removeEventListener","window","clearInterval","load","url","preload","setInterval","_reportStatisticsInfo","statisticsInfoReportInterval","play","pause","buffered","duration","volume","value","muted","seconds","mediaPrefix","HTMLAudioElement","info","mimeType","Math","floor","HTMLVideoElement","width","videoWidth","height","videoHeight","playerType","hasQualityInfo","decoded","dropped","getVideoPlaybackQuality","quality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","undefined","webkitDroppedFrameCount","decodedFrames","droppedFrames"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAAQC,mBAAR,QAAkC,cAAlC;AACA,SAAQC,wBAAR,EAAkCC,qBAAlC,QAA8D,uBAA9D,C,CAEA;;AACA,MAAMC,YAAN,CAAmB;AAEfC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,MAAlB,EAA0B;AACjC,SAAKC,GAAL,GAAW,cAAX;AACA,SAAKC,KAAL,GAAa,cAAb;AACA,SAAKC,QAAL,GAAgB,IAAIX,YAAJ,EAAhB;AAEA,SAAKY,OAAL,GAAeV,mBAAmB,EAAlC;;AACA,QAAI,OAAOM,MAAP,KAAkB,QAAtB,EAAgC;AAC5BK,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,OAAnB,EAA4BJ,MAA5B;AACH;;AAED,QAAID,eAAe,CAACQ,IAAhB,CAAqBC,WAArB,OAAuC,KAA3C,EAAkD;AAC9C,YAAM,IAAIb,wBAAJ,CAA6B,yDAA7B,CAAN;AACH;;AACD,QAAII,eAAe,CAACU,cAAhB,CAA+B,UAA/B,CAAJ,EAAgD;AAC5C,YAAM,IAAId,wBAAJ,CAA8B,gBAAeI,eAAe,CAACQ,IAAK,uCAAlE,CAAN;AACH;;AAED,SAAKG,CAAL,GAAS;AACLC,MAAAA,iBAAiB,EAAE,KAAKC,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B;AADd,KAAT;AAIA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AAEA,SAAKC,gBAAL,GAAwBjB,eAAxB;AACA,SAAKkB,aAAL,GAAqB,IAArB;AACH;;AAEDC,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKD,aAAT,EAAwB;AACpB,WAAKE,MAAL;AACA,WAAKC,kBAAL;AACH;;AACD,SAAKV,CAAL,GAAS,IAAT;AACA,SAAKM,gBAAL,GAAwB,IAAxB;;AACA,SAAKb,QAAL,CAAckB,kBAAd;;AACA,SAAKlB,QAAL,GAAgB,IAAhB;AACH;;AAEDmB,EAAAA,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAChB,QAAID,KAAK,KAAK9B,YAAY,CAACgC,UAA3B,EAAuC;AACnC,UAAI,KAAKR,aAAL,IAAsB,IAAtB,IAA8B,KAAKA,aAAL,CAAmBS,UAAnB,KAAkC,CAApE,EAAuE;AAAG;AACtEC,QAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AACzB,eAAK1B,QAAL,CAAc2B,IAAd,CAAmBrC,YAAY,CAACgC,UAAhC,EAA4C,KAAKM,SAAjD;AACH,SAFD;AAGH;AACJ,KAND,MAMO,IAAIR,KAAK,KAAK9B,YAAY,CAACuC,eAA3B,EAA4C;AAC/C,UAAI,KAAKf,aAAL,IAAsB,IAAtB,IAA8B,KAAKA,aAAL,CAAmBS,UAAnB,KAAkC,CAApE,EAAuE;AACnEC,QAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AACzB,eAAK1B,QAAL,CAAc2B,IAAd,CAAmBrC,YAAY,CAACuC,eAAhC,EAAiD,KAAKC,cAAtD;AACH,SAFD;AAGH;AACJ;;AACD,SAAK9B,QAAL,CAAc+B,WAAd,CAA0BX,KAA1B,EAAiCC,QAAjC;AACH;;AAEDW,EAAAA,GAAG,CAACZ,KAAD,EAAQC,QAAR,EAAkB;AACjB,SAAKrB,QAAL,CAAciC,cAAd,CAA6Bb,KAA7B,EAAoCC,QAApC;AACH;;AAEDa,EAAAA,kBAAkB,CAACC,YAAD,EAAe;AAC7B,SAAKrB,aAAL,GAAqBqB,YAArB;AACAA,IAAAA,YAAY,CAACC,gBAAb,CAA8B,gBAA9B,EAAgD,KAAK7B,CAAL,CAAOC,iBAAvD;;AAEA,QAAI,KAAKG,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,UAAI;AACAwB,QAAAA,YAAY,CAACE,WAAb,GAA2B,KAAK1B,gBAAhC;AACA,aAAKA,gBAAL,GAAwB,IAAxB;AACH,OAHD,CAGE,OAAOJ,CAAP,EAAU,CACR;AACA;AACH;AACJ;AACJ;;AAEDU,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKH,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBwB,GAAnB,GAAyB,EAAzB;;AACA,WAAKxB,aAAL,CAAmByB,eAAnB,CAAmC,KAAnC;;AACA,WAAKzB,aAAL,CAAmB0B,mBAAnB,CAAuC,gBAAvC,EAAyD,KAAKjC,CAAL,CAAOC,iBAAhE;;AACA,WAAKM,aAAL,GAAqB,IAArB;AACH;;AACD,QAAI,KAAKF,mBAAL,IAA4B,IAAhC,EAAsC;AAClC6B,MAAAA,MAAM,CAACC,aAAP,CAAqB,KAAK9B,mBAA1B;AACA,WAAKA,mBAAL,GAA2B,IAA3B;AACH;AACJ;;AAED+B,EAAAA,IAAI,GAAG;AACH,QAAI,CAAC,KAAK7B,aAAV,EAAyB;AACrB,YAAM,IAAIrB,qBAAJ,CAA0B,kDAA1B,CAAN;AACH;;AACD,SAAKqB,aAAL,CAAmBwB,GAAnB,GAAyB,KAAKzB,gBAAL,CAAsB+B,GAA/C;;AAEA,QAAI,KAAK9B,aAAL,CAAmBS,UAAnB,GAAgC,CAApC,EAAuC;AACnC,WAAKT,aAAL,CAAmBuB,WAAnB,GAAiC,CAAjC;AACH;;AAED,SAAKvB,aAAL,CAAmB+B,OAAnB,GAA6B,MAA7B;;AACA,SAAK/B,aAAL,CAAmB6B,IAAnB;;AACA,SAAK/B,mBAAL,GAA2B6B,MAAM,CAACK,WAAP,CACvB,KAAKC,qBAAL,CAA2BrC,IAA3B,CAAgC,IAAhC,CADuB,EAE3B,KAAKT,OAAL,CAAa+C,4BAFc,CAA3B;AAGH;;AAEDhC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKF,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBwB,GAAnB,GAAyB,EAAzB;;AACA,WAAKxB,aAAL,CAAmByB,eAAnB,CAAmC,KAAnC;AACH;;AACD,QAAI,KAAK3B,mBAAL,IAA4B,IAAhC,EAAsC;AAClC6B,MAAAA,MAAM,CAACC,aAAP,CAAqB,KAAK9B,mBAA1B;AACA,WAAKA,mBAAL,GAA2B,IAA3B;AACH;AACJ;;AAEDqC,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKnC,aAAL,CAAmBmC,IAAnB,EAAP;AACH;;AAEDC,EAAAA,KAAK,GAAG;AACJ,SAAKpC,aAAL,CAAmBoC,KAAnB;AACH;;AAED,MAAI9C,IAAJ,GAAW;AACP,WAAO,KAAKL,KAAZ;AACH;;AAED,MAAIoD,QAAJ,GAAe;AACX,WAAO,KAAKrC,aAAL,CAAmBqC,QAA1B;AACH;;AAED,MAAIC,QAAJ,GAAe;AACX,WAAO,KAAKtC,aAAL,CAAmBsC,QAA1B;AACH;;AAED,MAAIC,MAAJ,GAAa;AACT,WAAO,KAAKvC,aAAL,CAAmBuC,MAA1B;AACH;;AAED,MAAIA,MAAJ,CAAWC,KAAX,EAAkB;AACd,SAAKxC,aAAL,CAAmBuC,MAAnB,GAA4BC,KAA5B;AACH;;AAED,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKzC,aAAL,CAAmByC,KAA1B;AACH;;AAED,MAAIA,KAAJ,CAAUA,KAAV,EAAiB;AACb,SAAKzC,aAAL,CAAmByC,KAAnB,GAA2BA,KAA3B;AACH;;AAED,MAAIlB,WAAJ,GAAkB;AACd,QAAI,KAAKvB,aAAT,EAAwB;AACpB,aAAO,KAAKA,aAAL,CAAmBuB,WAA1B;AACH;;AACD,WAAO,CAAP;AACH;;AAED,MAAIA,WAAJ,CAAgBmB,OAAhB,EAAyB;AACrB,QAAI,KAAK1C,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBuB,WAAnB,GAAiCmB,OAAjC;AACH,KAFD,MAEO;AACH,WAAK7C,gBAAL,GAAwB6C,OAAxB;AACH;AACJ;;AAED,MAAI5B,SAAJ,GAAgB;AACZ,QAAI6B,WAAW,GAAI,KAAK3C,aAAL,YAA8B4C,gBAA/B,GAAmD,QAAnD,GAA8D,QAAhF;AACA,QAAIC,IAAI,GAAG;AACPC,MAAAA,QAAQ,EAAEH,WAAW,GAAG,KAAK5C,gBAAL,CAAsBT;AADvC,KAAX;;AAGA,QAAI,KAAKU,aAAT,EAAwB;AACpB6C,MAAAA,IAAI,CAACP,QAAL,GAAgBS,IAAI,CAACC,KAAL,CAAW,KAAKhD,aAAL,CAAmBsC,QAAnB,GAA8B,IAAzC,CAAhB;;AACA,UAAI,KAAKtC,aAAL,YAA8BiD,gBAAlC,EAAoD;AAChDJ,QAAAA,IAAI,CAACK,KAAL,GAAa,KAAKlD,aAAL,CAAmBmD,UAAhC;AACAN,QAAAA,IAAI,CAACO,MAAL,GAAc,KAAKpD,aAAL,CAAmBqD,WAAjC;AACH;AACJ;;AACD,WAAOR,IAAP;AACH;;AAED,MAAI7B,cAAJ,GAAqB;AACjB,QAAI6B,IAAI,GAAG;AACPS,MAAAA,UAAU,EAAE,KAAKrE,KADV;AAEP6C,MAAAA,GAAG,EAAE,KAAK/B,gBAAL,CAAsB+B;AAFpB,KAAX;;AAKA,QAAI,EAAE,KAAK9B,aAAL,YAA8BiD,gBAAhC,CAAJ,EAAuD;AACnD,aAAOJ,IAAP;AACH;;AAED,QAAIU,cAAc,GAAG,IAArB;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,QAAI,KAAKzD,aAAL,CAAmB0D,uBAAvB,EAAgD;AAC5C,UAAIC,OAAO,GAAG,KAAK3D,aAAL,CAAmB0D,uBAAnB,EAAd;;AACAF,MAAAA,OAAO,GAAGG,OAAO,CAACC,gBAAlB;AACAH,MAAAA,OAAO,GAAGE,OAAO,CAACE,kBAAlB;AACH,KAJD,MAIO,IAAI,KAAK7D,aAAL,CAAmB8D,uBAAnB,IAA8CC,SAAlD,EAA6D;AAChEP,MAAAA,OAAO,GAAG,KAAKxD,aAAL,CAAmB8D,uBAA7B;AACAL,MAAAA,OAAO,GAAG,KAAKzD,aAAL,CAAmBgE,uBAA7B;AACH,KAHM,MAGA;AACHT,MAAAA,cAAc,GAAG,KAAjB;AACH;;AAED,QAAIA,cAAJ,EAAoB;AAChBV,MAAAA,IAAI,CAACoB,aAAL,GAAqBT,OAArB;AACAX,MAAAA,IAAI,CAACqB,aAAL,GAAqBT,OAArB;AACH;;AAED,WAAOZ,IAAP;AACH;;AAEDlD,EAAAA,kBAAkB,CAACF,CAAD,EAAI;AAClB,QAAI,KAAKI,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,WAAKG,aAAL,CAAmBuB,WAAnB,GAAiC,KAAK1B,gBAAtC;AACA,WAAKA,gBAAL,GAAwB,IAAxB;AACH;;AACD,SAAKX,QAAL,CAAc2B,IAAd,CAAmBrC,YAAY,CAACgC,UAAhC,EAA4C,KAAKM,SAAjD;AACH;;AAEDmB,EAAAA,qBAAqB,GAAG;AACpB,SAAK/C,QAAL,CAAc2B,IAAd,CAAmBrC,YAAY,CAACuC,eAAhC,EAAiD,KAAKC,cAAtD;AACH;;AAnOc;;AAuOnB,eAAepC,YAAf","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport {createDefaultConfig} from '../config.js';\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nclass NativePlayer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new EventEmitter();\n\n        this._config = createDefaultConfig();\n        if (typeof config === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new InvalidArgumentException(`NativePlayer(${mediaDataSource.type}) doesn't support multipart playback!`);\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    destroy() {\n        if (this._mediaElement) {\n            this.unload();\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._mediaDataSource = null;\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        if (event === PlayerEvents.MEDIA_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {  // HAVE_NOTHING\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    attachMediaElement(mediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n        if (this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // Defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    detachMediaElement() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement = null;\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    load() {\n        if (!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        this._mediaElement.src = this._mediaDataSource.url;\n\n        if (this._mediaElement.readyState > 0) {\n            this._mediaElement.currentTime = 0;\n        }\n\n        this._mediaElement.preload = 'auto';\n        this._mediaElement.load();\n        this._statisticsReporter = window.setInterval(\n            this._reportStatisticsInfo.bind(this),\n        this._config.statisticsInfoReportInterval);\n    }\n\n    unload() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    play() {\n        return this._mediaElement.play();\n    }\n\n    pause() {\n        this._mediaElement.pause();\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get buffered() {\n        return this._mediaElement.buffered;\n    }\n\n    get duration() {\n        return this._mediaElement.duration;\n    }\n\n    get volume() {\n        return this._mediaElement.volume;\n    }\n\n    set volume(value) {\n        this._mediaElement.volume = value;\n    }\n\n    get muted() {\n        return this._mediaElement.muted;\n    }\n\n    set muted(muted) {\n        this._mediaElement.muted = muted;\n    }\n\n    get currentTime() {\n        if (this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    set currentTime(seconds) {\n        if (this._mediaElement) {\n            this._mediaElement.currentTime = seconds;\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    get mediaInfo() {\n        let mediaPrefix = (this._mediaElement instanceof HTMLAudioElement) ? 'audio/' : 'video/';\n        let info = {\n            mimeType: mediaPrefix + this._mediaDataSource.type\n        };\n        if (this._mediaElement) {\n            info.duration = Math.floor(this._mediaElement.duration * 1000);\n            if (this._mediaElement instanceof HTMLVideoElement) {\n                info.width = this._mediaElement.videoWidth;\n                info.height = this._mediaElement.videoHeight;\n            }\n        }\n        return info;\n    }\n\n    get statisticsInfo() {\n        let info = {\n            playerType: this._type,\n            url: this._mediaDataSource.url\n        };\n\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\n            return info;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if (this._mediaElement.getVideoPlaybackQuality) {\n            let quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n            decoded = this._mediaElement.webkitDecodedFrameCount;\n            dropped = this._mediaElement.webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if (hasQualityInfo) {\n            info.decodedFrames = decoded;\n            info.droppedFrames = dropped;\n        }\n        \n        return info;\n    }\n\n    _onvLoadedMetadata(e) {\n        if (this._pendingSeekTime != null) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n        this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n    }\n\n    _reportStatisticsInfo() {\n        this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n    }\n\n}\n\nexport default NativePlayer;"]},"metadata":{},"sourceType":"module"}