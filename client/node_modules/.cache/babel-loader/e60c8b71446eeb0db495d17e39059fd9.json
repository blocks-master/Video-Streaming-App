{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nclass Transmuxer {\n  constructor(mediaDataSource, config) {\n    this.TAG = 'Transmuxer';\n    this._emitter = new EventEmitter();\n\n    if (config.enableWorker && typeof Worker !== 'undefined') {\n      try {\n        let work = require('webworkify');\n\n        this._worker = work(TransmuxingWorker);\n        this._workerDestroying = false;\n\n        this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n\n        this._worker.postMessage({\n          cmd: 'init',\n          param: [mediaDataSource, config]\n        });\n\n        this.e = {\n          onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n        };\n        LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n\n        this._worker.postMessage({\n          cmd: 'logging_config',\n          param: LoggingControl.getConfig()\n        });\n      } catch (error) {\n        Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n        this._worker = null;\n        this._controller = new TransmuxingController(mediaDataSource, config);\n      }\n    } else {\n      this._controller = new TransmuxingController(mediaDataSource, config);\n    }\n\n    if (this._controller) {\n      let ctl = this._controller;\n      ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n      ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n      ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n      ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n      ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n      ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n      ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n    }\n  }\n\n  destroy() {\n    if (this._worker) {\n      if (!this._workerDestroying) {\n        this._workerDestroying = true;\n\n        this._worker.postMessage({\n          cmd: 'destroy'\n        });\n\n        LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n        this.e = null;\n      }\n    } else {\n      this._controller.destroy();\n\n      this._controller = null;\n    }\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n  }\n\n  on(event, listener) {\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  hasWorker() {\n    return this._worker != null;\n  }\n\n  open() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'start'\n      });\n    } else {\n      this._controller.start();\n    }\n  }\n\n  close() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'stop'\n      });\n    } else {\n      this._controller.stop();\n    }\n  }\n\n  seek(milliseconds) {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'seek',\n        param: milliseconds\n      });\n    } else {\n      this._controller.seek(milliseconds);\n    }\n  }\n\n  pause() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'pause'\n      });\n    } else {\n      this._controller.pause();\n    }\n  }\n\n  resume() {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'resume'\n      });\n    } else {\n      this._controller.resume();\n    }\n  }\n\n  _onInitSegment(type, initSegment) {\n    // do async invoke\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n    });\n  }\n\n  _onMediaSegment(type, mediaSegment) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n    });\n  }\n\n  _onLoadingComplete() {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n    });\n  }\n\n  _onRecoveredEarlyEof() {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n    });\n  }\n\n  _onMediaInfo(mediaInfo) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n    });\n  }\n\n  _onMetaDataArrived(metadata) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n    });\n  }\n\n  _onScriptDataArrived(data) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n    });\n  }\n\n  _onStatisticsInfo(statisticsInfo) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n    });\n  }\n\n  _onIOError(type, info) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n    });\n  }\n\n  _onDemuxError(type, info) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n    });\n  }\n\n  _onRecommendSeekpoint(milliseconds) {\n    Promise.resolve().then(() => {\n      this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n    });\n  }\n\n  _onLoggingConfigChanged(config) {\n    if (this._worker) {\n      this._worker.postMessage({\n        cmd: 'logging_config',\n        param: config\n      });\n    }\n  }\n\n  _onWorkerMessage(e) {\n    let message = e.data;\n    let data = message.data;\n\n    if (message.msg === 'destroyed' || this._workerDestroying) {\n      this._workerDestroying = false;\n\n      this._worker.terminate();\n\n      this._worker = null;\n      return;\n    }\n\n    switch (message.msg) {\n      case TransmuxingEvents.INIT_SEGMENT:\n      case TransmuxingEvents.MEDIA_SEGMENT:\n        this._emitter.emit(message.msg, data.type, data.data);\n\n        break;\n\n      case TransmuxingEvents.LOADING_COMPLETE:\n      case TransmuxingEvents.RECOVERED_EARLY_EOF:\n        this._emitter.emit(message.msg);\n\n        break;\n\n      case TransmuxingEvents.MEDIA_INFO:\n        Object.setPrototypeOf(data, MediaInfo.prototype);\n\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case TransmuxingEvents.METADATA_ARRIVED:\n      case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n      case TransmuxingEvents.STATISTICS_INFO:\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case TransmuxingEvents.IO_ERROR:\n      case TransmuxingEvents.DEMUX_ERROR:\n        this._emitter.emit(message.msg, data.type, data.info);\n\n        break;\n\n      case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n        this._emitter.emit(message.msg, data);\n\n        break;\n\n      case 'logcat_callback':\n        Log.emitter.emit('log', data.type, data.logcat);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n}\n\nexport default Transmuxer;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/core/transmuxer.js"],"names":["EventEmitter","Log","LoggingControl","TransmuxingController","TransmuxingEvents","TransmuxingWorker","MediaInfo","Transmuxer","constructor","mediaDataSource","config","TAG","_emitter","enableWorker","Worker","work","require","_worker","_workerDestroying","addEventListener","_onWorkerMessage","bind","postMessage","cmd","param","e","onLoggingConfigChanged","_onLoggingConfigChanged","registerListener","getConfig","error","_controller","ctl","on","IO_ERROR","_onIOError","DEMUX_ERROR","_onDemuxError","INIT_SEGMENT","_onInitSegment","MEDIA_SEGMENT","_onMediaSegment","LOADING_COMPLETE","_onLoadingComplete","RECOVERED_EARLY_EOF","_onRecoveredEarlyEof","MEDIA_INFO","_onMediaInfo","METADATA_ARRIVED","_onMetaDataArrived","SCRIPTDATA_ARRIVED","_onScriptDataArrived","STATISTICS_INFO","_onStatisticsInfo","RECOMMEND_SEEKPOINT","_onRecommendSeekpoint","destroy","removeListener","removeAllListeners","event","listener","addListener","off","hasWorker","open","start","close","stop","seek","milliseconds","pause","resume","type","initSegment","Promise","resolve","then","emit","mediaSegment","mediaInfo","metadata","data","statisticsInfo","info","message","msg","terminate","Object","setPrototypeOf","prototype","emitter","logcat"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nclass Transmuxer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'Transmuxer';\n        this._emitter = new EventEmitter();\n\n        if (config.enableWorker && typeof (Worker) !== 'undefined') {\n            try {\n                let work = require('webworkify');\n                this._worker = work(TransmuxingWorker);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({cmd: 'init', param: [mediaDataSource, config]});\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({cmd: 'logging_config', param: LoggingControl.getConfig()});\n            } catch (error) {\n                Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new TransmuxingController(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new TransmuxingController(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            let ctl = this._controller;\n            ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n        }\n    }\n\n    destroy() {\n        if (this._worker) {\n            if (!this._workerDestroying) {\n                this._workerDestroying = true;\n                this._worker.postMessage({cmd: 'destroy'});\n                LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n                this.e = null;\n            }\n        } else {\n            this._controller.destroy();\n            this._controller = null;\n        }\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    hasWorker() {\n        return this._worker != null;\n    }\n\n    open() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'start'});\n        } else {\n            this._controller.start();\n        }\n    }\n\n    close() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'stop'});\n        } else {\n            this._controller.stop();\n        }\n    }\n\n    seek(milliseconds) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'seek', param: milliseconds});\n        } else {\n            this._controller.seek(milliseconds);\n        }\n    }\n\n    pause() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'pause'});\n        } else {\n            this._controller.pause();\n        }\n    }\n\n    resume() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'resume'});\n        } else {\n            this._controller.resume();\n        }\n    }\n\n    _onInitSegment(type, initSegment) {\n        // do async invoke\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n        });\n    }\n\n    _onMediaSegment(type, mediaSegment) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n        });\n    }\n\n    _onLoadingComplete() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n        });\n    }\n\n    _onRecoveredEarlyEof() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n        });\n    }\n\n    _onMediaInfo(mediaInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n        });\n    }\n\n    _onMetaDataArrived(metadata) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n        });\n    }\n\n    _onScriptDataArrived(data) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n        });\n    }\n\n    _onStatisticsInfo(statisticsInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n        });\n    }\n\n    _onIOError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n        });\n    }\n\n    _onDemuxError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n        });\n    }\n\n    _onRecommendSeekpoint(milliseconds) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n        });\n    }\n\n    _onLoggingConfigChanged(config) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'logging_config', param: config});\n        }\n    }\n\n    _onWorkerMessage(e) {\n        let message = e.data;\n        let data = message.data;\n\n        if (message.msg === 'destroyed' || this._workerDestroying) {\n            this._workerDestroying = false;\n            this._worker.terminate();\n            this._worker = null;\n            return;\n        }\n\n        switch (message.msg) {\n            case TransmuxingEvents.INIT_SEGMENT:\n            case TransmuxingEvents.MEDIA_SEGMENT:\n                this._emitter.emit(message.msg, data.type, data.data);\n                break;\n            case TransmuxingEvents.LOADING_COMPLETE:\n            case TransmuxingEvents.RECOVERED_EARLY_EOF:\n                this._emitter.emit(message.msg);\n                break;\n            case TransmuxingEvents.MEDIA_INFO:\n                Object.setPrototypeOf(data, MediaInfo.prototype);\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.METADATA_ARRIVED:\n            case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n            case TransmuxingEvents.STATISTICS_INFO:\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.IO_ERROR:\n            case TransmuxingEvents.DEMUX_ERROR:\n                this._emitter.emit(message.msg, data.type, data.info);\n                break;\n            case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n                this._emitter.emit(message.msg, data);\n                break;\n            case 'logcat_callback':\n                Log.emitter.emit('log', data.type, data.logcat);\n                break;\n            default:\n                break;\n        }\n    }\n\n}\n\nexport default Transmuxer;"]},"metadata":{},"sourceType":"module"}