{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport IOController from '../io/io-controller.js';\nimport { createDefaultConfig } from '../config.js';\n\nclass Features {\n  static supportMSEH264Playback() {\n    return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n  }\n\n  static supportNetworkStreamIO() {\n    let ioctl = new IOController({}, createDefaultConfig());\n    let loaderType = ioctl.loaderType;\n    ioctl.destroy();\n    return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n  }\n\n  static getNetworkLoaderTypeName() {\n    let ioctl = new IOController({}, createDefaultConfig());\n    let loaderType = ioctl.loaderType;\n    ioctl.destroy();\n    return loaderType;\n  }\n\n  static supportNativeMediaPlayback(mimeType) {\n    if (Features.videoElement == undefined) {\n      Features.videoElement = window.document.createElement('video');\n    }\n\n    let canPlay = Features.videoElement.canPlayType(mimeType);\n    return canPlay === 'probably' || canPlay == 'maybe';\n  }\n\n  static getFeatureList() {\n    let features = {\n      mseFlvPlayback: false,\n      mseLiveFlvPlayback: false,\n      networkStreamIO: false,\n      networkLoaderName: '',\n      nativeMP4H264Playback: false,\n      nativeWebmVP8Playback: false,\n      nativeWebmVP9Playback: false\n    };\n    features.mseFlvPlayback = Features.supportMSEH264Playback();\n    features.networkStreamIO = Features.supportNetworkStreamIO();\n    features.networkLoaderName = Features.getNetworkLoaderTypeName();\n    features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n    features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n    features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n    features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n    return features;\n  }\n\n}\n\nexport default Features;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/core/features.js"],"names":["IOController","createDefaultConfig","Features","supportMSEH264Playback","window","MediaSource","isTypeSupported","supportNetworkStreamIO","ioctl","loaderType","destroy","getNetworkLoaderTypeName","supportNativeMediaPlayback","mimeType","videoElement","undefined","document","createElement","canPlay","canPlayType","getFeatureList","features","mseFlvPlayback","mseLiveFlvPlayback","networkStreamIO","networkLoaderName","nativeMP4H264Playback","nativeWebmVP8Playback","nativeWebmVP9Playback"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,OAAOA,YAAP,MAAyB,wBAAzB;AACA,SAAQC,mBAAR,QAAkC,cAAlC;;AAEA,MAAMC,QAAN,CAAe;AAEX,SAAOC,sBAAP,GAAgC;AAC5B,WAAOC,MAAM,CAACC,WAAP,IACAD,MAAM,CAACC,WAAP,CAAmBC,eAAnB,CAAmC,2CAAnC,CADP;AAEH;;AAED,SAAOC,sBAAP,GAAgC;AAC5B,QAAIC,KAAK,GAAG,IAAIR,YAAJ,CAAiB,EAAjB,EAAqBC,mBAAmB,EAAxC,CAAZ;AACA,QAAIQ,UAAU,GAAGD,KAAK,CAACC,UAAvB;AACAD,IAAAA,KAAK,CAACE,OAAN;AACA,WAAOD,UAAU,IAAI,qBAAd,IAAuCA,UAAU,IAAI,wBAA5D;AACH;;AAED,SAAOE,wBAAP,GAAkC;AAC9B,QAAIH,KAAK,GAAG,IAAIR,YAAJ,CAAiB,EAAjB,EAAqBC,mBAAmB,EAAxC,CAAZ;AACA,QAAIQ,UAAU,GAAGD,KAAK,CAACC,UAAvB;AACAD,IAAAA,KAAK,CAACE,OAAN;AACA,WAAOD,UAAP;AACH;;AAED,SAAOG,0BAAP,CAAkCC,QAAlC,EAA4C;AACxC,QAAIX,QAAQ,CAACY,YAAT,IAAyBC,SAA7B,EAAwC;AACpCb,MAAAA,QAAQ,CAACY,YAAT,GAAwBV,MAAM,CAACY,QAAP,CAAgBC,aAAhB,CAA8B,OAA9B,CAAxB;AACH;;AACD,QAAIC,OAAO,GAAGhB,QAAQ,CAACY,YAAT,CAAsBK,WAAtB,CAAkCN,QAAlC,CAAd;AACA,WAAOK,OAAO,KAAK,UAAZ,IAA0BA,OAAO,IAAI,OAA5C;AACH;;AAED,SAAOE,cAAP,GAAwB;AACpB,QAAIC,QAAQ,GAAG;AACXC,MAAAA,cAAc,EAAE,KADL;AAEXC,MAAAA,kBAAkB,EAAE,KAFT;AAGXC,MAAAA,eAAe,EAAE,KAHN;AAIXC,MAAAA,iBAAiB,EAAE,EAJR;AAKXC,MAAAA,qBAAqB,EAAE,KALZ;AAMXC,MAAAA,qBAAqB,EAAE,KANZ;AAOXC,MAAAA,qBAAqB,EAAE;AAPZ,KAAf;AAUAP,IAAAA,QAAQ,CAACC,cAAT,GAA0BpB,QAAQ,CAACC,sBAAT,EAA1B;AACAkB,IAAAA,QAAQ,CAACG,eAAT,GAA2BtB,QAAQ,CAACK,sBAAT,EAA3B;AACAc,IAAAA,QAAQ,CAACI,iBAAT,GAA6BvB,QAAQ,CAACS,wBAAT,EAA7B;AACAU,IAAAA,QAAQ,CAACE,kBAAT,GAA8BF,QAAQ,CAACC,cAAT,IAA2BD,QAAQ,CAACG,eAAlE;AACAH,IAAAA,QAAQ,CAACK,qBAAT,GAAiCxB,QAAQ,CAACU,0BAAT,CAAoC,4CAApC,CAAjC;AACAS,IAAAA,QAAQ,CAACM,qBAAT,GAAiCzB,QAAQ,CAACU,0BAAT,CAAoC,oCAApC,CAAjC;AACAS,IAAAA,QAAQ,CAACO,qBAAT,GAAiC1B,QAAQ,CAACU,0BAAT,CAAoC,0BAApC,CAAjC;AAEA,WAAOS,QAAP;AACH;;AAjDU;;AAqDf,eAAenB,QAAf","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport IOController from '../io/io-controller.js';\nimport {createDefaultConfig} from '../config.js';\n\nclass Features {\n\n    static supportMSEH264Playback() {\n        return window.MediaSource &&\n               window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n    }\n\n    static supportNetworkStreamIO() {\n        let ioctl = new IOController({}, createDefaultConfig());\n        let loaderType = ioctl.loaderType;\n        ioctl.destroy();\n        return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n    }\n\n    static getNetworkLoaderTypeName() {\n        let ioctl = new IOController({}, createDefaultConfig());\n        let loaderType = ioctl.loaderType;\n        ioctl.destroy();\n        return loaderType;\n    }\n\n    static supportNativeMediaPlayback(mimeType) {\n        if (Features.videoElement == undefined) {\n            Features.videoElement = window.document.createElement('video');\n        }\n        let canPlay = Features.videoElement.canPlayType(mimeType);\n        return canPlay === 'probably' || canPlay == 'maybe';\n    }\n\n    static getFeatureList() {\n        let features = {\n            mseFlvPlayback: false,\n            mseLiveFlvPlayback: false,\n            networkStreamIO: false,\n            networkLoaderName: '',\n            nativeMP4H264Playback: false,\n            nativeWebmVP8Playback: false,\n            nativeWebmVP9Playback: false\n        };\n\n        features.mseFlvPlayback = Features.supportMSEH264Playback();\n        features.networkStreamIO = Features.supportNetworkStreamIO();\n        features.networkLoaderName = Features.getNetworkLoaderTypeName();\n        features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n        features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n        features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n        features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n\n        return features;\n    }\n\n}\n\nexport default Features;"]},"metadata":{},"sourceType":"module"}