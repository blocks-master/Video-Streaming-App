{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport Polyfill from '../utils/polyfill.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n\nlet TransmuxingWorker = function (self) {\n  let TAG = 'TransmuxingWorker';\n  let controller = null;\n  let logcatListener = onLogcatCallback.bind(this);\n  Polyfill.install();\n  self.addEventListener('message', function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        controller = new TransmuxingController(e.data.param[0], e.data.param[1]);\n        controller.on(TransmuxingEvents.IO_ERROR, onIOError.bind(this));\n        controller.on(TransmuxingEvents.DEMUX_ERROR, onDemuxError.bind(this));\n        controller.on(TransmuxingEvents.INIT_SEGMENT, onInitSegment.bind(this));\n        controller.on(TransmuxingEvents.MEDIA_SEGMENT, onMediaSegment.bind(this));\n        controller.on(TransmuxingEvents.LOADING_COMPLETE, onLoadingComplete.bind(this));\n        controller.on(TransmuxingEvents.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n        controller.on(TransmuxingEvents.MEDIA_INFO, onMediaInfo.bind(this));\n        controller.on(TransmuxingEvents.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n        controller.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n        controller.on(TransmuxingEvents.STATISTICS_INFO, onStatisticsInfo.bind(this));\n        controller.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n        break;\n\n      case 'destroy':\n        if (controller) {\n          controller.destroy();\n          controller = null;\n        }\n\n        self.postMessage({\n          msg: 'destroyed'\n        });\n        break;\n\n      case 'start':\n        controller.start();\n        break;\n\n      case 'stop':\n        controller.stop();\n        break;\n\n      case 'seek':\n        controller.seek(e.data.param);\n        break;\n\n      case 'pause':\n        controller.pause();\n        break;\n\n      case 'resume':\n        controller.resume();\n        break;\n\n      case 'logging_config':\n        {\n          let config = e.data.param;\n          LoggingControl.applyConfig(config);\n\n          if (config.enableCallback === true) {\n            LoggingControl.addLogListener(logcatListener);\n          } else {\n            LoggingControl.removeLogListener(logcatListener);\n          }\n\n          break;\n        }\n    }\n  });\n\n  function onInitSegment(type, initSegment) {\n    let obj = {\n      msg: TransmuxingEvents.INIT_SEGMENT,\n      data: {\n        type: type,\n        data: initSegment\n      }\n    };\n    self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer\n  }\n\n  function onMediaSegment(type, mediaSegment) {\n    let obj = {\n      msg: TransmuxingEvents.MEDIA_SEGMENT,\n      data: {\n        type: type,\n        data: mediaSegment\n      }\n    };\n    self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer\n  }\n\n  function onLoadingComplete() {\n    let obj = {\n      msg: TransmuxingEvents.LOADING_COMPLETE\n    };\n    self.postMessage(obj);\n  }\n\n  function onRecoveredEarlyEof() {\n    let obj = {\n      msg: TransmuxingEvents.RECOVERED_EARLY_EOF\n    };\n    self.postMessage(obj);\n  }\n\n  function onMediaInfo(mediaInfo) {\n    let obj = {\n      msg: TransmuxingEvents.MEDIA_INFO,\n      data: mediaInfo\n    };\n    self.postMessage(obj);\n  }\n\n  function onMetaDataArrived(metadata) {\n    let obj = {\n      msg: TransmuxingEvents.METADATA_ARRIVED,\n      data: metadata\n    };\n    self.postMessage(obj);\n  }\n\n  function onScriptDataArrived(data) {\n    let obj = {\n      msg: TransmuxingEvents.SCRIPTDATA_ARRIVED,\n      data: data\n    };\n    self.postMessage(obj);\n  }\n\n  function onStatisticsInfo(statInfo) {\n    let obj = {\n      msg: TransmuxingEvents.STATISTICS_INFO,\n      data: statInfo\n    };\n    self.postMessage(obj);\n  }\n\n  function onIOError(type, info) {\n    self.postMessage({\n      msg: TransmuxingEvents.IO_ERROR,\n      data: {\n        type: type,\n        info: info\n      }\n    });\n  }\n\n  function onDemuxError(type, info) {\n    self.postMessage({\n      msg: TransmuxingEvents.DEMUX_ERROR,\n      data: {\n        type: type,\n        info: info\n      }\n    });\n  }\n\n  function onRecommendSeekpoint(milliseconds) {\n    self.postMessage({\n      msg: TransmuxingEvents.RECOMMEND_SEEKPOINT,\n      data: milliseconds\n    });\n  }\n\n  function onLogcatCallback(type, str) {\n    self.postMessage({\n      msg: 'logcat_callback',\n      data: {\n        type: type,\n        logcat: str\n      }\n    });\n  }\n};\n\nexport default TransmuxingWorker;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/core/transmuxing-worker.js"],"names":["Log","LoggingControl","Polyfill","TransmuxingController","TransmuxingEvents","TransmuxingWorker","self","TAG","controller","logcatListener","onLogcatCallback","bind","install","addEventListener","e","data","cmd","param","on","IO_ERROR","onIOError","DEMUX_ERROR","onDemuxError","INIT_SEGMENT","onInitSegment","MEDIA_SEGMENT","onMediaSegment","LOADING_COMPLETE","onLoadingComplete","RECOVERED_EARLY_EOF","onRecoveredEarlyEof","MEDIA_INFO","onMediaInfo","METADATA_ARRIVED","onMetaDataArrived","SCRIPTDATA_ARRIVED","onScriptDataArrived","STATISTICS_INFO","onStatisticsInfo","RECOMMEND_SEEKPOINT","onRecommendSeekpoint","destroy","postMessage","msg","start","stop","seek","pause","resume","config","applyConfig","enableCallback","addLogListener","removeLogListener","type","initSegment","obj","mediaSegment","mediaInfo","metadata","statInfo","info","milliseconds","str","logcat"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport Polyfill from '../utils/polyfill.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\n\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n\nlet TransmuxingWorker = function (self) {\n\n    let TAG = 'TransmuxingWorker';\n    let controller = null;\n    let logcatListener = onLogcatCallback.bind(this);\n\n    Polyfill.install();\n\n    self.addEventListener('message', function (e) {\n        switch (e.data.cmd) {\n            case 'init':\n                controller = new TransmuxingController(e.data.param[0], e.data.param[1]);\n                controller.on(TransmuxingEvents.IO_ERROR, onIOError.bind(this));\n                controller.on(TransmuxingEvents.DEMUX_ERROR, onDemuxError.bind(this));\n                controller.on(TransmuxingEvents.INIT_SEGMENT, onInitSegment.bind(this));\n                controller.on(TransmuxingEvents.MEDIA_SEGMENT, onMediaSegment.bind(this));\n                controller.on(TransmuxingEvents.LOADING_COMPLETE, onLoadingComplete.bind(this));\n                controller.on(TransmuxingEvents.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n                controller.on(TransmuxingEvents.MEDIA_INFO, onMediaInfo.bind(this));\n                controller.on(TransmuxingEvents.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n                controller.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n                controller.on(TransmuxingEvents.STATISTICS_INFO, onStatisticsInfo.bind(this));\n                controller.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n                break;\n            case 'destroy':\n                if (controller) {\n                    controller.destroy();\n                    controller = null;\n                }\n                self.postMessage({msg: 'destroyed'});\n                break;\n            case 'start':\n                controller.start();\n                break;\n            case 'stop':\n                controller.stop();\n                break;\n            case 'seek':\n                controller.seek(e.data.param);\n                break;\n            case 'pause':\n                controller.pause();\n                break;\n            case 'resume':\n                controller.resume();\n                break;\n            case 'logging_config': {\n                let config = e.data.param;\n                LoggingControl.applyConfig(config);\n\n                if (config.enableCallback === true) {\n                    LoggingControl.addLogListener(logcatListener);\n                } else {\n                    LoggingControl.removeLogListener(logcatListener);\n                }\n                break;\n            }\n        }\n    });\n\n    function onInitSegment(type, initSegment) {\n        let obj = {\n            msg: TransmuxingEvents.INIT_SEGMENT,\n            data: {\n                type: type,\n                data: initSegment\n            }\n        };\n        self.postMessage(obj, [initSegment.data]);  // data: ArrayBuffer\n    }\n\n    function onMediaSegment(type, mediaSegment) {\n        let obj = {\n            msg: TransmuxingEvents.MEDIA_SEGMENT,\n            data: {\n                type: type,\n                data: mediaSegment\n            }\n        };\n        self.postMessage(obj, [mediaSegment.data]);  // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        let obj = {\n            msg: TransmuxingEvents.LOADING_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        let obj = {\n            msg: TransmuxingEvents.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo) {\n        let obj = {\n            msg: TransmuxingEvents.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onMetaDataArrived(metadata) {\n        let obj = {\n            msg: TransmuxingEvents.METADATA_ARRIVED,\n            data: metadata\n        };\n        self.postMessage(obj);\n    }\n\n    function onScriptDataArrived(data) {\n        let obj = {\n            msg: TransmuxingEvents.SCRIPTDATA_ARRIVED,\n            data: data\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo) {\n        let obj = {\n            msg: TransmuxingEvents.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type, info) {\n        self.postMessage({\n            msg: TransmuxingEvents.IO_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onDemuxError(type, info) {\n        self.postMessage({\n            msg: TransmuxingEvents.DEMUX_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds) {\n        self.postMessage({\n            msg: TransmuxingEvents.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n\n    function onLogcatCallback(type, str) {\n        self.postMessage({\n            msg: 'logcat_callback',\n            data: {\n                type: type,\n                logcat: str\n            }\n        });\n    }\n\n};\n\nexport default TransmuxingWorker;"]},"metadata":{},"sourceType":"module"}