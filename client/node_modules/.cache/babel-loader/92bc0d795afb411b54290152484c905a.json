{"ast":null,"code":"/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n  static init() {\n    MP4.types = {\n      avc1: [],\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      mvex: [],\n      mvhd: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: [],\n      '.mp3': []\n    };\n\n    for (let name in MP4.types) {\n      if (MP4.types.hasOwnProperty(name)) {\n        MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n      }\n    }\n\n    let constants = MP4.constants = {};\n    constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\n    0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n    0x69, 0x73, 0x6F, 0x6D, // isom\n    0x61, 0x76, 0x63, 0x31 // avc1\n    ]);\n    constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x01 // entry_count\n    ]);\n    constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n    constants.STSC = constants.STCO = constants.STTS;\n    constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n    constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler\n    ]);\n    constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler\n    ]);\n    constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0C, // entry_size\n    0x75, 0x72, 0x6C, 0x20, // type 'url '\n    0x00, 0x00, 0x00, 0x01 // version(0) + flags\n    ]); // Sound media header\n\n    constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)\n    ]); // video media header\n\n    constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n    0x00, 0x00, // graphicsmode: 2 bytes\n    0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes\n    0x00, 0x00]);\n  } // Generate a box\n\n\n  static box(type) {\n    let size = 8;\n    let result = null;\n    let datas = Array.prototype.slice.call(arguments, 1);\n    let arrayCount = datas.length;\n\n    for (let i = 0; i < arrayCount; i++) {\n      size += datas[i].byteLength;\n    }\n\n    result = new Uint8Array(size);\n    result[0] = size >>> 24 & 0xFF; // size\n\n    result[1] = size >>> 16 & 0xFF;\n    result[2] = size >>> 8 & 0xFF;\n    result[3] = size & 0xFF;\n    result.set(type, 4); // type\n\n    let offset = 8;\n\n    for (let i = 0; i < arrayCount; i++) {\n      // data body\n      result.set(datas[i], offset);\n      offset += datas[i].byteLength;\n    }\n\n    return result;\n  } // emit ftyp & moov\n\n\n  static generateInitSegment(meta) {\n    let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n    let moov = MP4.moov(meta);\n    let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n    result.set(ftyp, 0);\n    result.set(moov, ftyp.byteLength);\n    return result;\n  } // Movie metadata box\n\n\n  static moov(meta) {\n    let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n    let trak = MP4.trak(meta);\n    let mvex = MP4.mvex(meta);\n    return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n  } // Movie header box\n\n\n  static mvhd(timescale, duration) {\n    return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    timescale >>> 24 & 0xFF, // timescale: 4 bytes\n    timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n    duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0\n    0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n    0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n    0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n    0xFF, 0xFF, 0xFF, 0xFF // next_track_ID\n    ]));\n  } // Track box\n\n\n  static trak(meta) {\n    return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n  } // Track header box\n\n\n  static tkhd(meta) {\n    let trackId = meta.id,\n        duration = meta.duration;\n    let width = meta.presentWidth,\n        height = meta.presentHeight;\n    return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    trackId >>> 24 & 0xFF, // track_ID: 4 bytes\n    trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n    duration >>> 24 & 0xFF, // duration: 4 bytes\n    duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)\n    0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)\n    0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n    width >>> 8 & 0xFF, // width and height\n    width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));\n  } // Media Box\n\n\n  static mdia(meta) {\n    return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n  } // Media header box\n\n\n  static mdhd(meta) {\n    let timescale = meta.timescale;\n    let duration = meta.duration;\n    return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    timescale >>> 24 & 0xFF, // timescale: 4 bytes\n    timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n    duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)\n    0x00, 0x00 // pre_defined = 0\n    ]));\n  } // Media handler reference box\n\n\n  static hdlr(meta) {\n    let data = null;\n\n    if (meta.type === 'audio') {\n      data = MP4.constants.HDLR_AUDIO;\n    } else {\n      data = MP4.constants.HDLR_VIDEO;\n    }\n\n    return MP4.box(MP4.types.hdlr, data);\n  } // Media infomation box\n\n\n  static minf(meta) {\n    let xmhd = null;\n\n    if (meta.type === 'audio') {\n      xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n    } else {\n      xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n    }\n\n    return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n  } // Data infomation box\n\n\n  static dinf() {\n    let result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n    return result;\n  } // Sample table box\n\n\n  static stbl(meta) {\n    let result = MP4.box(MP4.types.stbl, // type: stbl\n    MP4.stsd(meta), // Sample Description Table\n    MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample\n    MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n    MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n    MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n    );\n    return result;\n  } // Sample description box\n\n\n  static stsd(meta) {\n    if (meta.type === 'audio') {\n      if (meta.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n      } // else: aac -> mp4a\n\n\n      return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n    }\n  }\n\n  static mp3(meta) {\n    let channelCount = meta.channelCount;\n    let sampleRate = meta.audioSampleRate;\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n    0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n    0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n    0x00, 0x10, // sampleSize(2)\n    0x00, 0x00, 0x00, 0x00, // reserved(4)\n    sampleRate >>> 8 & 0xFF, // Audio sample rate\n    sampleRate & 0xFF, 0x00, 0x00]);\n    return MP4.box(MP4.types['.mp3'], data);\n  }\n\n  static mp4a(meta) {\n    let channelCount = meta.channelCount;\n    let sampleRate = meta.audioSampleRate;\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n    0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n    0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n    0x00, 0x10, // sampleSize(2)\n    0x00, 0x00, 0x00, 0x00, // reserved(4)\n    sampleRate >>> 8 & 0xFF, // Audio sample rate\n    sampleRate & 0xFF, 0x00, 0x00]);\n    return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n  }\n\n  static esds(meta) {\n    let config = meta.config || [];\n    let configSize = config.length;\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n    0x03, // descriptor_type\n    0x17 + configSize, // length3\n    0x00, 0x01, // es_id\n    0x00, // stream_priority\n    0x04, // descriptor_type\n    0x0F + configSize, // length\n    0x40, // codec: mpeg4_audio\n    0x15, // stream_type: Audio\n    0x00, 0x00, 0x00, // buffer_size\n    0x00, 0x00, 0x00, 0x00, // maxBitrate\n    0x00, 0x00, 0x00, 0x00, // avgBitrate\n    0x05 // descriptor_type\n    ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n    ]));\n    return MP4.box(MP4.types.esds, data);\n  }\n\n  static avc1(meta) {\n    let avcc = meta.avcc;\n    let width = meta.codecWidth,\n        height = meta.codecHeight;\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n    0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n    0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n    0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n    width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n    height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes\n    0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes\n    0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n    0x00, 0x01, // frame_count\n    0x0A, // strlen\n    0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes\n    0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth\n    0xFF, 0xFF // pre_defined = -1\n    ]);\n    return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n  } // Movie Extends box\n\n\n  static mvex(meta) {\n    return MP4.box(MP4.types.mvex, MP4.trex(meta));\n  } // Track Extends box\n\n\n  static trex(meta) {\n    let trackId = meta.id;\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n    trackId >>> 24 & 0xFF, // track_ID\n    trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]);\n    return MP4.box(MP4.types.trex, data);\n  } // Movie fragment box\n\n\n  static moof(track, baseMediaDecodeTime) {\n    return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n  }\n\n  static mfhd(sequenceNumber) {\n    let data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n    sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n    return MP4.box(MP4.types.mfhd, data);\n  } // Track fragment box\n\n\n  static traf(track, baseMediaDecodeTime) {\n    let trackId = track.id; // Track fragment header box\n\n    let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n    trackId >>> 24 & 0xFF, // track_ID\n    trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF])); // Track Fragment Decode Time\n\n    let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n    baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n    baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n    let sdtp = MP4.sdtp(track);\n    let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n    return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n  } // Sample Dependency Type box\n\n\n  static sdtp(track) {\n    let samples = track.samples || [];\n    let sampleCount = samples.length;\n    let data = new Uint8Array(4 + sampleCount); // 0~4 bytes: version(0) & flags\n\n    for (let i = 0; i < sampleCount; i++) {\n      let flags = samples[i].flags;\n      data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n      flags.dependsOn << 4 // sample_depends_on\n      | flags.isDependedOn << 2 // sample_is_depended_on\n      | flags.hasRedundancy; // sample_has_redundancy\n    }\n\n    return MP4.box(MP4.types.sdtp, data);\n  } // Track fragment run box\n\n\n  static trun(track, offset) {\n    let samples = track.samples || [];\n    let sampleCount = samples.length;\n    let dataSize = 12 + 16 * sampleCount;\n    let data = new Uint8Array(dataSize);\n    offset += 8 + dataSize;\n    data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n    sampleCount >>> 24 & 0xFF, // sample_count\n    sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n    offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n    for (let i = 0; i < sampleCount; i++) {\n      let duration = samples[i].duration;\n      let size = samples[i].size;\n      let flags = samples[i].flags;\n      let cts = samples[i].cts;\n      data.set([duration >>> 24 & 0xFF, // sample_duration\n      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n      size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n      flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n      cts >>> 24 & 0xFF, // sample_composition_time_offset\n      cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n    }\n\n    return MP4.box(MP4.types.trun, data);\n  }\n\n  static mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n}\n\nMP4.init();\nexport default MP4;","map":{"version":3,"sources":["C:/Users/gethi/Desktop/React Apps/streams/client/node_modules/flv.js/src/remux/mp4-generator.js"],"names":["MP4","init","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","name","hasOwnProperty","charCodeAt","constants","FTYP","Uint8Array","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","box","type","size","result","datas","Array","prototype","slice","call","arguments","arrayCount","length","i","byteLength","set","offset","generateInitSegment","meta","timescale","duration","trackId","id","width","presentWidth","height","presentHeight","data","xmhd","codec","mp3","channelCount","sampleRate","audioSampleRate","config","configSize","concat","avcc","codecWidth","codecHeight","track","baseMediaDecodeTime","sequenceNumber","samples","sampleCount","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","dataSize","cts","isNonSync"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [], avcC: [], btrt: [], dinf: [],\n            dref: [], esds: [], ftyp: [], hdlr: [],\n            mdat: [], mdhd: [], mdia: [], mfhd: [],\n            minf: [], moof: [], moov: [], mp4a: [],\n            mvex: [], mvhd: [], sdtp: [], stbl: [],\n            stco: [], stsc: [], stsd: [], stsz: [],\n            stts: [], tfdt: [], tfhd: [], traf: [],\n            trak: [], trun: [], trex: [], tkhd: [],\n            vmhd: [], smhd: [], '.mp3': []\n        };\n\n        for (let name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        let constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\n            0x0,  0x0,  0x0,  0x1,   // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D,  // isom\n            0x61, 0x76, 0x63, 0x31   // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01   // entry_count\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // entry_count\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // sample_size\n            0x00, 0x00, 0x00, 0x00   // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01,  // entry_count\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\n            0x00, 0x00,              // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\n            0x00, 0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type) {\n        let size = 8;\n        let result = null;\n        let datas = Array.prototype.slice.call(arguments, 1);\n        let arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF;  // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>>  8) & 0xFF;\n        result[3] = (size) & 0xFF;\n\n        result.set(type, 4);  // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) {  // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta) {\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        let moov = MP4.moov(meta);\n\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        let trak = MP4.trak(meta);\n        let mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id, duration = meta.duration;\n        let width = meta.presentWidth, height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            (width >>> 8) & 0xFF,    // width and height\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF,\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    // Media Box\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        let timescale = meta.timescale;\n        let duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4,             // language: und (undetermined)\n            0x00, 0x00              // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta) {\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        let result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    // Sample table box\n    static stbl(meta) {\n        let result = MP4.box(MP4.types.stbl,  // type: stbl\n            MP4.stsd(meta),  // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\n        ); \n        return result; \n    }\n\n    // Sample description box\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            if (meta.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n            }\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp3(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types['.mp3'], data);\n    }\n\n    static mp4a(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        let config = meta.config || [];\n        let configSize = config.length;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\n\n            0x03,                    // descriptor_type\n            0x17 + configSize,       // length3\n            0x00, 0x01,              // es_id\n            0x00,                    // stream_priority\n\n            0x04,                    // descriptor_type\n            0x0F + configSize,       // length\n            0x40,                    // codec: mpeg4_audio\n            0x15,                    // stream_type: Audio\n            0x00, 0x00, 0x00,        // buffer_size\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\n\n            0x05                     // descriptor_type\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02         // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    static avc1(meta) {\n        let avcc = meta.avcc;\n        let width = meta.codecWidth, height = meta.codecHeight;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF,    // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF,   // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00,  // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00,  // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            0x00, 0x01,              // frame_count\n            0x0A,                    // strlen\n            0x78, 0x71, 0x71, 0x2F,  // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E,\n            0x6A, 0x73, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18,              // depth\n            0xFF, 0xFF               // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        let trackId = meta.id;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>>  8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        let trackId = track.id;\n\n        // Track fragment header box\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>>  8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        let sdtp = MP4.sdtp(track);\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            let flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6)    // is_leading: 2 (bit)\n                        | (flags.dependsOn << 4)    // sample_depends_on\n                        | (flags.isDependedOn << 2) // sample_is_depended_on\n                        | (flags.hasRedundancy);    // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let dataSize = 12 + 16 * sampleCount;\n        let data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>>  8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF,      // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>>  8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n            let duration = samples[i].duration;\n            let size = samples[i].size;\n            let flags = samples[i].flags;\n            let cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF,  // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>>  8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF,      // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>>  8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00,                // sample_degradation_priority\n                (cts >>> 24) & 0xFF,       // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>>  8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\nexport default MP4;"]},"metadata":{},"sourceType":"module"}